using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Internal;
using UltraMafia.DAL;
using UltraMafia.DAL.Enums;
using UltraMafia.DAL.Model;
using UltraMafia.Frontend;
using UltraMafia.GameModel;

namespace UltraMafia
{
    public class GameService
    {
        private readonly IFrontend _frontend;
        private readonly GameDbContext _dataContext;
        private readonly GameSettings _gameSettings;
        private int _minimalGamerCount;

        public GameService(IFrontend frontend, GameDbContext dataContext, GameSettings gameSettings)
        {
            _frontend = frontend;
            _dataContext = dataContext;
            _gameSettings = gameSettings;
            _minimalGamerCount = _gameSettings.MinGamerCount < 4 ? 4 : _gameSettings.MinGamerCount;
        }

        public void ListenToEvents()
        {
            _frontend.ActionHandler = ActionHandler;
            _frontend.MessageHandler = MessageHandler;
            _frontend.RegistrationHandler = RegistrationHandler;
            _frontend.GameCreationHandler = GameCreationHandler;
            _frontend.GameStartHandler = GameStartHandler;
            _frontend.StopGameHandler = StopGameHandler;
            _frontend.EnableGame();
        }

        private async Task<GameSession> StopGameHandler(GameRoom room, GamerAccount callerAccount)
        {
            var session =
                await _dataContext.GameSessions.FirstOrDefaultAsync(s =>
                    s.RoomId == room.Id && s.State != GameSessionStates.GameOver);
            if (session == null)
            {
                throw new Exception("–ò–≥—Ä—ã –Ω–µ—Ç, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π –µ–µ, –∞ –ø–æ—Ç–æ–º –∑–∞–∫—Ä—ã–≤–∞–π)");
            }

            if (session.State == GameSessionStates.Playing)
            {
                throw new Exception("–ù–µ–ª—å–∑—è —Ç–∞–∫! –ù–∞—Ä–æ–¥ –∏–≥—Ä–∞–µ—Ç!");
            }

            if (session.CreatedByGamerAccountId != callerAccount.Id)
            {
                throw new Exception("–ò–≥—Ä—É –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Ç–æ–ª—å–∫–æ –µ–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å!");
            }

            _dataContext.Remove(session);
            await _dataContext.SaveChangesAsync();
            return session;
        }

        private async Task<GameSession> GameStartHandler(GameRoom room)
        {
            var session =
                await _dataContext.GameSessions
                    .Include(s => s.GameMembers)
                    .Include("GameMembers.GamerAccount")
                    .FirstOrDefaultAsync(s =>
                        s.RoomId == room.Id && s.State != GameSessionStates.GameOver);
            if (session == null)
                throw new Exception("–ù–µ—Ç –∏–≥—Ä—ã –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë!");
            if (session.State == GameSessionStates.Playing)
                throw new Exception("–ò–≥—Ä–∞ —É–∂–µ –∏–≥—Ä–∞–µ—Ç—Å—è) –ò–≥—Ä–∞–π —á—ë—Ä—Ç —Ç–µ–±—è –ø–æ–±–µ—Ä–∏)");
            if (session.GameMembers.Count < _minimalGamerCount)
                throw new Exception($"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤, –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞: {_minimalGamerCount}");
            ResolveRoles(session);
            await _frontend.SendMessageToRoom(session.Room,
                $"–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –º–∞—Ñ–∏–æ–∑–∏: {session.GameMembers.Count(m => m.Role == GameRoles.Mafia)}");
            session.State = GameSessionStates.Playing;
            await _dataContext.SaveChangesAsync();
            RunGame(session);
            return session;
        }

        private void RunGame(GameSession session)
        {
            Task.Run(async () =>
            {
                try
                {
                    // game timer
                    var stopwatch = new Stopwatch();
                    stopwatch.Start();

                    await SendIntroduceMessages(session.GameMembers);
                    var dayNumber = 1;
                    while (true)
                    {
                        #region Night logic

                        var nightKillsCount = 0;
                        await _frontend.SendMessageToRoom(session.Room,
                            $@"
<b>–ù–æ—á—å #{dayNumber}</b> üåÉ  
–ù–∞ —É–ª–∏—Ü–∞—Ö –æ—á–µ–Ω—å —Ç–∏—Ö–æ, –Ω–æ —ç—Ç–æ –ø–æ–∫–∞.

<b>–ò–≥—Ä–æ–∫–∏</b>: 
{session.GetMembersInfo(false, true)}
", true);
                        await Task.Delay(5000);
                        var doctorActionTask = AskDoctorForAction(session).ConfigureAwait(false);
                        var mafiaActionTask = AskMafiaForAction(session).ConfigureAwait(false);
                        var copActionTask = AskCopForAction(session).ConfigureAwait(false);

                        // resolving actions
                        var doctorAction = await doctorActionTask;
                        GameSessionMember healingTarget = null;
                        if (doctorAction.Action != null)
                        {
                            healingTarget = doctorAction.Target;
                            await HealGamer(healingTarget);
                        }

                        await Task.Delay(2000);

                        var copAction = await copActionTask;
                        switch (copAction.Action)
                        {
                            case GameActions.Killing:
                                if (await KillGamer(session, GameRoles.Cop, copAction.Target, healingTarget))
                                {
                                    nightKillsCount++;
                                }

                                break;
                            case GameActions.Checkup:
                                await InspectGamer(session, GameRoles.Cop, copAction.Target);
                                break;
                            case null:
                                // nothing to do, maybe cop is dead? (or he sleeps)
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }

                        await Task.Delay(2000);
                        var mafiaAction = await mafiaActionTask;
                        switch (mafiaAction.Action)
                        {
                            case GameActions.Killing:
                                if (await KillGamer(session, GameRoles.Mafia, mafiaAction.Target, healingTarget))
                                {
                                    nightKillsCount++;
                                }

                                break;
                            case GameActions.Checkup:
                                await InspectGamer(session, GameRoles.Mafia, mafiaAction.Target);
                                break;
                            case null:
                                // nothing to do, maybe mafia sleeps?
                                break;
                            default:
                                throw new ArgumentOutOfRangeException();
                        }

                        if (nightKillsCount == 0)
                        {
                            await _frontend.SendMessageToRoom(session.Room, "–£–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ. –í—Å–µ –æ—Å—Ç–∞–ª–∏—Å—å –∂–∏–≤—ã.");
                        }

                        #endregion

                        await Task.Delay(2000);

                        // ensure this game is over
                        if (await IsGameOver(session, stopwatch))
                            break;

                        await Task.Delay(2000);

                        #region Day logic

                        await _frontend.SendMessageToRoom(session.Room,
                            $@"
–î–µ–Ω—å #{dayNumber} ‚òÄÔ∏è
–í—Å–µ –ø—Ä–æ—Å–Ω—É–ª–∏—Å—å –ø–æ–¥ –ø—Ç–µ–Ω–∏–µ –ø—Ç–∏—á–µ–∫. 
–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è –Ω–∞–∫–∞–∑–∞—Ç—å –º–∞—Ñ–∏—é.

<b>–ò–≥—Ä–æ–∫–∏</b>: 
{session.GetMembersInfo(false, true)}

–ê —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –ø—Ä–æ—à–µ–¥—à—É—é –Ω–æ—á—å, –∑–∞—Ç–µ–º –±—É–¥–µ–º –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å. 
–í—Ä–µ–º—è –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ: 2 –º–∏–Ω—É—Ç—ã.
", true);

                        await Task.Delay(120000);
                        var gamerForLynch = await PublicLynchVote(session);

                        if (gamerForLynch != null)
                        {
                            var lynchApproved = await ApproveLynch(session, gamerForLynch);
                            if (lynchApproved)
                            {
                                await _frontend.SendMessageToRoom(session.Room,
                                    @$"–í–µ—à–∞–µ–º {gamerForLynch.GamerAccount.NickName}...");
                                await KillGamer(session, GameRoles.Citizen, gamerForLynch, null);
                            }
                            else
                            {
                                await _frontend.SendMessageToRoom(session.Room,
                                    $@"–≠—Ç–æ —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ, {gamerForLynch.GamerAccount.NickName} –±—ã–ª –Ω–∞ –≤–æ–ª–æ—Å–∫–µ –æ—Ç —Å–º–µ—Ä—Ç–∏. 
–ì—Ä–∞–∂–¥–∞–Ω–µ —Ä–µ—à–∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –µ–º—É —à–∞–Ω—Å.");
                            }
                        }
                        else
                        {
                            await _frontend.SendMessageToRoom(session.Room,
                                "–ú–Ω–µ–Ω–∏—è –∂–∏—Ç–µ–ª–µ–π —Ä–∞–∑–æ—à–ª–∏—Å—å. –ù–∏–∫–æ–≥–æ –Ω–µ –±—É–¥–µ–º –≤–µ—à–∞—Ç—å.");
                        }

                        #endregion

                        await Task.Delay(2000);
                        // ensure this game is over
                        if (await IsGameOver(session, stopwatch))
                            break;
                        dayNumber++;
                        await Task.Delay(2000);
                    }
                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    throw;
                }
            });
        }

        private async Task<bool> ApproveLynch(GameSession session, GameSessionMember gamerForLynch)
        {
            var allowedMembers = session.GetAliveMembers().ToList();
            allowedMembers.Remove(gamerForLynch);
            var approveVotes =
                await _frontend.CreateLynchApprovalVote(session.Room, allowedMembers.ToArray(), gamerForLynch);
            // no votes, skip
            if (!approveVotes.Any())
                return false;

            var groupedVotes = (from vote in approveVotes
                group vote by vote.Approve
                into voteGroup
                select new {key = voteGroup.Key, voices = voteGroup.Count()}).ToList();
            var topVotes = (from voteItem in groupedVotes
                where voteItem.voices == groupedVotes.Max(g => g.voices)
                select voteItem.key).ToList();
            // there are two top result, skip this Lynch... otherwise return it.
            return topVotes.Count == 1 && topVotes[0];
        }

        private async Task<GameSessionMember?> PublicLynchVote(GameSession session)
        {
            var votes = await _frontend.CreateLynchVoteAndReceiveResults(session.Room, session.GetAliveMembers());
            // empty results
            if (!votes.Any())
                return null;

            var groupedVotes = (from vote in votes
                group vote by vote.VoiceTarget.Id
                into voteGroup
                select new {key = voteGroup.Key, elements = voteGroup, voices = voteGroup.Count()}).ToList();
            var topVotes = (from voteItem in groupedVotes
                where voteItem.voices == groupedVotes.Max(g => g.voices)
                select voteItem.elements.First().VoiceTarget).ToList();
            // there are two top result, skip this Lynch... otherwise return it.
            return topVotes.Count > 1 ? null : topVotes[0];
        }

        private async Task<bool> IsGameOver(GameSession session, Stopwatch stopwatch)
        {
            var aliveMembers = session.GetAliveMembers();
            var citizensCount = aliveMembers.Count(g => g.Role != GameRoles.Mafia);
            var mafiaCount = aliveMembers.Length - citizensCount;
            var isGameOver = false;
            var mafiaWins = false;
            // case 1: mafia wins
            if (mafiaCount >= citizensCount)
            {
                isGameOver = true;
                mafiaWins = true;
                foreach (var gameSessionMember in aliveMembers.Where(g => g.Role == GameRoles.Mafia))
                {
                    gameSessionMember.IsWin = true;
                }
            }
            // case 2: citizens wins
            else if (mafiaCount == 0)
            {
                isGameOver = true;
                foreach (var gameSessionMember in aliveMembers.Where(g => g.Role != GameRoles.Mafia))
                {
                    gameSessionMember.IsWin = true;
                }
            }

            // game is not over
            if (!isGameOver) return false;

            stopwatch.Stop();
            var gameOverString =
                new StringBuilder(
                    $"<b>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</b> üèÅ\n\n");
            gameOverString.AppendLine($"<b>–ü–æ–±–µ–¥–∏–ª–∏</b>: {(mafiaWins ? "–º–∞—Ñ–∏–æ–∑–∏ üòà" : "–º–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ üë§")}.");
            gameOverString.AppendLine(
                $"<b>–ò–≥—Ä–∞ –¥–ª–∏–ª–∞—Å—å</b>: {(int) Math.Round(stopwatch.Elapsed.TotalMinutes)} –º–∏–Ω—É—Ç.\n");
            gameOverString.AppendLine("<b>–ò–≥—Ä–æ–∫–∏:</b>");
            gameOverString.Append(session.GetMembersInfo(true, true));
            gameOverString.AppendLine("------");
            gameOverString.AppendLine("–ë–ª–∞–≥–æ–¥–∞—Ä—é –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–≥—Ä—ã! :)");
            await _frontend.SendMessageToRoom(session.Room, gameOverString.ToString(), true);

            session.State = GameSessionStates.GameOver;
            await _dataContext.SaveChangesAsync();

            return true;
        }

        private async Task InspectGamer(GameSession session, GameRoles instectorRole, GameSessionMember inspectorTarget)
        {
            await _frontend.SendMessageToGamer(inspectorTarget.GamerAccount, "–ö—Ç–æ-—Ç–æ –Ω–∞–≤–æ–¥–∏—Ç —Å–ø—Ä–∞–≤–∫–∏ –ø–æ —Ç–µ–±–µ...");
            var roleName = inspectorTarget.Role switch
            {
                GameRoles.Citizen => "–≥–æ—Ä–æ–∂–∞–Ω–∏–Ω",
                GameRoles.Cop => "–∫–æ–º–º–∏—Å–∞—Ä",
                GameRoles.Doctor => "–¥–æ–∫—Ç–æ—Ä",
                GameRoles.Mafia => "–º–∞—Ñ–∏—è"
            };
            var messageText =
                $"–ù–∞—à–∏ –ª—é–¥–∏ –Ω–∞—à–ª–∏ –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: <b>{inspectorTarget.GamerAccount.NickName}</b> —ç—Ç–æ <b>{roleName}</b>.";
            switch (instectorRole)
            {
                case GameRoles.Cop:
                {
                    var cop = session.GetCop();
                    if (cop == null)
                    {
                        Console.WriteLine($"{session.Id} - Cop is null!");
                        return;
                    }

                    await _frontend.SendMessageToGamer(cop.GamerAccount, messageText);
                    break;
                }
                case GameRoles.Mafia:
                    var mafiaMembers = session.GetMafia();
                    var messageTasks =
                        mafiaMembers.Select(m => _frontend.SendMessageToGamer(m.GamerAccount, messageText));
                    await Task.WhenAll(messageTasks);
                    break;
                default:
                    throw new ArgumentOutOfRangeException(nameof(instectorRole), instectorRole,
                        "Supported only for Cop and Mafia");
            }
        }

        private async Task<bool> KillGamer(GameSession session, GameRoles killerRole, GameSessionMember actionTarget,
            GameSessionMember? healingTarget)
        {
            // healed by doctor
            if (actionTarget.Id == healingTarget?.Id)
                return false;
            actionTarget.IsDead = true;
            await _frontend.SendMessageToRoom(session.Room,
                $"–ë—ã–ª —É–±–∏—Ç: <i>{actionTarget.Role.GetRoleName()}</i> <b>{actionTarget.GamerAccount.NickName}</b>");

            AskForLastWord(session, actionTarget).ConfigureAwait(false);
            return true;
        }

        private async Task AskForLastWord(GameSession session, GameSessionMember actionTarget)
        {
            await _frontend.SendMessageToGamer(actionTarget.GamerAccount,
                "–¢–µ–±—è —É–±–∏–ª–∏. –¢—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —Å–≤–æ–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞...");
            var lastWords = await _frontend.GetLastWords(actionTarget.GamerAccount);
            // nothing to say, just skip it
            if (lastWords == null)
                return;
            try
            {
                await _frontend.SendMessageToRoom(session.Room,
                    $"–°–≤–∏–¥–µ—Ç–µ–ª–∏ —Å–º–µ—Ä—Ç–∏ <b>{actionTarget.GamerAccount.NickName}</b> —Å–ª—ã—à–∞–ª–∏ –∫–∞–∫ –æ–Ω –∫—Ä–∏—á–∞–ª: \n <b><i>{lastWords}</i></b>");
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }

        private Task HealGamer(GameSessionMember healingTarget) =>
            _frontend.SendMessageToGamer(healingTarget.GamerAccount, "–î–æ–∫—Ç–æ—Ä –ø—Ä–∏—à–µ–ª –ø–æ–¥–ª–µ—á–∏—Ç—å —Ç–µ–±—è :)");

        private async Task<ActionDescriptor> AskCopForAction(GameSession session)
        {
            var cop = session.GetCop();
            // there is no cop (return nothing)
            if (cop == null)
                return new ActionDescriptor();
            var aliveMembers = session.GetAliveMembers();
            var selectedAction = await _frontend.AskCopForAction(cop, aliveMembers);
            await _frontend.SendMessageToRoom(session.Room,
                selectedAction.Target != null
                    ? selectedAction.Action == GameActions.Checkup
                        ? "–ö–æ–º–º–∏—Å–∞—Ä –ø–æ–µ—Ö–∞–ª –≤ –æ—Ñ–∏—Å, —á—Ç–æ–±—ã –Ω–∞–≤–µ—Å—Ç–∏ —Å–ø—Ä–∞–≤–∫–∏!"
                        : "–ö–æ–º–º–∏—Å–∞—Ä –∑–∞—Ä—è–¥–∏–ª —Å–≤–æ—é –ø—É—à–∫—É..."
                    : "–ö–æ–º–º–∏—Å–∞—Ä –Ω–µ —Ö–æ—á–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–ª—É–∂–±—É :(");
            return selectedAction;
        }

        private async Task<ActionDescriptor> AskDoctorForAction(GameSession session)
        {
            var doctor = session.GetDoctor();
            // there is no doctor (return nothing)
            if (doctor == null)
                return new ActionDescriptor();
            var aliveMembers = session.GetAliveMembers();
            var selectedAction = await _frontend.AskDoctorForAction(doctor, aliveMembers);
            await _frontend.SendMessageToRoom(session.Room,
                selectedAction.Target != null
                    ? "–î–æ–∫—Ç–æ—Ä –≤—ã—à–µ–ª –Ω–∞ –Ω–æ—á–Ω–æ–µ –¥–µ–∂—É—Ä—Å—Ç–≤–æ!"
                    : "–î–æ–∫—Ç–æ—Ä –Ω–µ —Ö–æ—á–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–ª—É–∂–±—É :(");
            return selectedAction;
        }

        private async Task<ActionDescriptor> AskMafiaForAction(GameSession session)
        {
            var mafia = session.GetMafia();
            var availableGamers = session.GetAliveMembers();
            var actionTasks = mafia
                .Select(m => _frontend.AskMafiaForAction(m, availableGamers));
            var allActions = await Task.WhenAll(actionTasks);
            await Task.Delay(5000);
            // trying to find top action
            var groupedActions = (from action in allActions
                group action by new {target = action.Target, action = action.Action}
                into grouped
                select new {actionInfo = grouped.Key, votes = grouped.Count()}).ToList();
            var topAction = new ActionDescriptor();
            if (groupedActions.Any())
            {
                var maxVotes = groupedActions.Max(a => a.votes);
                var allActionsWithTopResults = groupedActions.Where(a => a.votes == maxVotes)
                    .Select(a =>
                        new ActionDescriptor {Action = a.actionInfo.action, Target = a.actionInfo.target}).ToList();
                topAction = allActionsWithTopResults.Count == 1
                    ? allActionsWithTopResults.First()
                    : allActionsWithTopResults
                        .Where(x => x.Target != null && x.Action != null)
                        .Random();
                if (topAction.Target != null && topAction.Action != null && mafia.Length > 1)
                {
                    var actionText = topAction.Action switch
                    {
                        GameActions.Killing => "—É–±–∏–π—Å—Ç–≤–æ",
                        GameActions.Checkup => "–ø—Ä–æ–≤–µ—Ä–∫–∞",
                        _ => ""
                    };
                    var notifyTopActonTasks = mafia
                        .Select(m => _frontend.SendMessageToGamer(m.GamerAccount,
                            $"–°–∞–º—ã–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–º —Ä–µ—à–µ–Ω–∏–µ–º —Å—Ç–∞–ª–æ: <b>{actionText} {topAction.Target.GamerAccount.NickName}</b>"));
                    await Task.WhenAll(notifyTopActonTasks);
                }
            }


            await _frontend.SendMessageToRoom(session.Room,
                topAction.Target != null
                    ? topAction.Action == GameActions.Checkup
                        ? "–ú–∞—Ñ–∏—è —Ä–µ—à–∏–ª–∞ –æ—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è!"
                        : "–ú–∞—Ñ–∏—è –≤—ã—à–ª–∞ –Ω–∞ –æ—Ö–æ—Ç—É!"
                    : "–ú–∞—Ñ–∏—è —Å–ø–∏—Ç :(");
            return topAction;
        }

        private async Task SendIntroduceMessages(List<GameSessionMember> gamers)
        {
            var introListTasks = (from gameSessionMember in gamers
                let roleText = gameSessionMember.Role switch
                {
                    GameRoles.Citizen => @"–¢—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ª–∏–Ω—á–µ–≤–∞—Ç—å –º–µ—Ä–∑–∞–≤—Ü–µ–≤ –Ω–∞ –≥–æ—Ä–æ–¥—Å–∫–æ–º —Å–æ–±—Ä–∞–Ω–∏–∏.",
                    GameRoles.Cop => @"–¢—ã —à–µ—Ä–∏—Ñ. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ –≤—ã—á–∏—Å–ª–∏—Ç—å –º–∞—Ñ–∏—é –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∞ –∑–∞–ª—å–µ—Ç –≤–µ—Å—å –≥–æ—Ä–æ–¥ –∫—Ä–æ–≤—å—é –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π!",
                    GameRoles.Doctor => "–¢—ã –¥–æ–∫—Ç–æ—Ä. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–ø–∞—Å–∞—Ç—å –∂–∏—Ç–µ–ª–µ–π –æ—Ç –Ω–∞–ø–∞–¥–∫–æ–≤ –º–µ—Ä–∑–∫–æ–π –º–∞—Ñ–∏–∏.",
                    GameRoles.Mafia => "–¢—ã –º–∞—Ñ–∏—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º –∫—Ç–æ —Ç—É—Ç –Ω–∞—Å—Ç–æ—è—â–∏–π –∑–ª–æ–¥–µ–π.",
                    _ => throw new ArgumentOutOfRangeException()
                }
                select _frontend.SendMessageToGamer(gameSessionMember.GamerAccount, $"{roleText} –£–¥–∞—á–∏!")).ToList();

            await Task.WhenAll(introListTasks);
        }

        private void ResolveRoles(GameSession session)
        {
            // how many mafia in the game?
            var resolveEnemyCount = (int) Math.Truncate(session.GameMembers.Count / (double) _minimalGamerCount);
            // copy original list
            var gamersToResolve = session.GameMembers.ToList();
            // resolving enemies
            while (resolveEnemyCount > 0)
            {
                var enemy = gamersToResolve.Random();
                enemy.Role = GameRoles.Mafia;
                gamersToResolve.Remove(enemy);
                resolveEnemyCount--;
            }

            // resolving a doctor
            var doctor = gamersToResolve.Random();
            doctor.Role = GameRoles.Doctor;
            gamersToResolve.Remove(doctor);
            // is there cop? we can resolve cop,
            // only if there are at least 3 players without role.
            if (gamersToResolve.Count > 2)
            {
                var cop = gamersToResolve.Random();
                cop.Role = GameRoles.Cop;
                gamersToResolve.Remove(cop);
            }

            // another gamers are citizens :)
            gamersToResolve.ForEach(g => g.Role = GameRoles.Citizen);
        }

        private async Task<GameSession> GameCreationHandler(GameRoom room, GamerAccount createdByAccount)
        {
            // trying to find existing session
            var sessionExists = _dataContext.GameSessions
                .Any(i =>
                    i.RoomId == room.Id &&
                    new[] {GameSessionStates.Playing, GameSessionStates.Registration}.Contains(i.State));
            if (sessionExists)
            {
                throw new Exception("–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–≥—Ä—É —Ç–∞–º –≥–¥–µ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å :)");
            }

            var session = new GameSession
            {
                RoomId = room.Id,
                Room = room,
                State = GameSessionStates.Registration,
                CreatedByGamerAccountId = createdByAccount.Id,
                CreatedByGamerAccount = createdByAccount
            };
            await _dataContext.AddAsync(session);
            await _dataContext.SaveChangesAsync();
            return session;
        }

        private async Task<GameSession> RegistrationHandler(GameRoom room, GamerAccount account)
        {
            var session = await _dataContext.GameSessions
                .Include(r => r.Room)
                .Include("GameMembers.GamerAccount")
                .FirstOrDefaultAsync(g => g.RoomId == room.Id && g.State != GameSessionStates.GameOver);
            if (session == null)
                throw new Exception("–ò–≥—Ä—ã –≤ –¥–∞–Ω–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –µ–µ.");

            if (session.State != GameSessionStates.Registration)
                throw new Exception("–ù–µ–ª—å–∑—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏–≥—Ä–∞ —É–∂–µ –∏–¥–µ—Ç");

            if (session.GameMembers.Any(gm => gm.GamerAccountId == account.Id))
                throw new Exception("–î–∞ —Ç—ã —É–∂–µ –≤ –∏–≥—Ä–µ! –ñ–¥–∏ :)");

            session.GameMembers.Add(new GameSessionMember
            {
                GamerAccountId = account.Id,
                GameSessionId = session.Id
            });
            await _dataContext.SaveChangesAsync();
            await _frontend.SendMessageToRoom(session.Room, $"{account.NickName}, –∫—Ä–∞—Å–∞–≤—á–∏–∫, –≤ –¥–µ–ª–µ!");
            return session;
        }

        private Task MessageHandler(GamerAccount gamer, string message)
        {
            throw new System.NotImplementedException();
        }

        private Task ActionHandler(
            (GameRoom room, GamerAccount gamerFrom, GameActions action, GamerAccount target) actionInfo)
        {
            throw new NullReferenceException();
        }
    }
}